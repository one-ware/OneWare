using OneWare.Essentials.Extensions;
using OneWare.Essentials.Models;
using OneWare.Essentials.Services;
using System;
using System.IO;
using System.Linq;

namespace OneWare.Vhdl;

public class TomlCreator
{
    private readonly ILogger _logger;

    public TomlCreator(ILogger logger)
    {
        _logger = logger;
    }

    public void RefreshToml(IProjectRoot project)
    {
        CreateToml(project);
    }

    private bool IsVhdl(IProjectFile file)
    {
        return file.Extension.Equals(".vhd", StringComparison.OrdinalIgnoreCase)
               || file.Extension.Equals(".vhdl", StringComparison.OrdinalIgnoreCase);
    }

    private void CreateToml(IProjectRoot project)
    {
        try
        {
            var vhdls = project.Files.Where(IsVhdl).ToList();

            const string workFiles = "[libraries]\ndefault.files = [\n";
            string vhdlString = "";
            string autoGenerated;

            if (project.Entities.FirstOrDefault(x => x.Header == "Generated") is IProjectFolder generatedFolder)
            {
                foreach (var i in generatedFolder.Entities)
                {
                    if (i is IProjectFile file && IsVhdl(file))
                        vhdls.Add(file);
                }
            }

            for (int i = 0; i < vhdls.Count; i++)
            {
                var vhdl = vhdls[i];
                string relativePath = vhdl is ExternalFile
                    ? vhdl.RelativePath.Replace('\\', '/')
                    : vhdl.RelativePath.ToUnixPath();

                vhdlString += $"\t'{relativePath}'";
                if (i < vhdls.Count - 1)
                    vhdlString += ",";
                vhdlString += "\n";
            }

            vhdlString += "]";
            autoGenerated = $"# auto-generated\n{workFiles}{vhdlString}\n# auto-generated-end";

            var tomlPath = Path.Combine(project.RootFolderPath, "vhdl_ls.toml");

            if (File.Exists(tomlPath))
            {
                var existingToml = File.ReadAllText(tomlPath);
                var start = existingToml.IndexOf("# auto-generated", StringComparison.OrdinalIgnoreCase);
                var end = start >= 0
                    ? existingToml.IndexOf("# auto-generated-end", start, StringComparison.Ordinal)
                    : -1;

                if (start != -1 && end > start)
                {
                    existingToml = existingToml.Remove(start, end - start + "# auto-generated-end".Length);
                    existingToml = existingToml.Insert(start, autoGenerated);
                    File.WriteAllText(tomlPath, existingToml);
                    return;
                }

                existingToml = "\n" + autoGenerated + existingToml;
                File.WriteAllText(tomlPath, existingToml);
                return;
            }

            File.WriteAllText(tomlPath, autoGenerated);
        }
        catch (Exception e)
        {
            _logger.Error(e.Message, e);
        }
    }
}
